name: CI/CD - Build, Scan, Push, and Deploy to EKS

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: akira-erp-repo
  IMAGE_TAG: latest
  CLUSTER_NAME: akira-eks-cluster
  DEPLOYMENT_NAME: akira-erp-app
  CONTAINER_NAME: akira-container

jobs:
  build-scan-deploy:
    runs-on: ubuntu-latest

    steps:
    # 1️⃣ Checkout code
    - name: Checkout repository
      uses: actions/checkout@v4

    # 2️⃣ Configure AWS credentials from GitHub Secrets
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.FIRST_SECRET }}
        aws-secret-access-key: ${{ secrets.SECOND_SECRET }}
        aws-region: ${{ env.AWS_REGION }}

    # 3️⃣ Login to Amazon ECR
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    # 4️⃣ Build Docker image
    - name: Build Docker image
      run: |
        docker build -t $ECR_REPOSITORY:$IMAGE_TAG .

    # 5️⃣ Scan image using Trivy (Open Source)
    - name: Scan Docker image for vulnerabilities
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}
        format: 'table'
        exit-code: '0'
        ignore-unfixed: true
        vuln-type: 'os,library'

    # 6️⃣ Tag & Push image to ECR
    - name: Tag and Push image to Amazon ECR
      run: |
        ECR_URI=$(aws ecr describe-repositories --repository-names $ECR_REPOSITORY --region $AWS_REGION --query "repositories[0].repositoryUri" --output text)
        docker tag $ECR_REPOSITORY:$IMAGE_TAG $ECR_URI:$IMAGE_TAG
        docker push $ECR_URI:$IMAGE_TAG
        echo "ECR_URI=$ECR_URI" >> $GITHUB_ENV

    # 7️⃣ Update kubeconfig to access EKS
    - name: Configure kubectl for EKS
      run: |
        aws eks update-kubeconfig --name $CLUSTER_NAME --region $AWS_REGION

    # 8️⃣ Deploy to EKS
    - name: Deploy new image to EKS
      run: |
        kubectl set image deployment/$DEPLOYMENT_NAME $CONTAINER_NAME=$ECR_URI:$IMAGE_TAG
        kubectl rollout status deployment/$DEPLOYMENT_NAME
        kubectl get pods -o wide

